From bbd87e55cc631b9a403074638b21901689946337 Mon Sep 17 00:00:00 2001
From: "Webtourismus.at" <entwicklung@webtourismus.at>
Date: Thu, 16 Mar 2023 19:47:06 +0100
Subject: [PATCH 1/5] First draft for geolocation integration

---
 composer.json                                 |  1 +
 .../cookies.cookies_service_group.maps.yml    |  8 ++
 .../cookies.cookies_service.google_maps.yml   | 22 +++++
 .../cookies_geolocation.info.yml              | 10 +++
 .../cookies_geolocation.install               | 27 ++++++
 .../cookies_geolocation.libraries.yml         |  9 ++
 .../cookies_geolocation.module                | 83 +++++++++++++++++++
 .../css/cookies_geolocation.css               | 17 ++++
 modules/cookies_geolocation/css/logo.svg      |  1 +
 .../js/cookies_geolocation.js                 | 58 +++++++++++++
 10 files changed, 236 insertions(+)
 create mode 100644 config/install/cookies.cookies_service_group.maps.yml
 create mode 100644 modules/cookies_geolocation/config/install/cookies.cookies_service.google_maps.yml
 create mode 100644 modules/cookies_geolocation/cookies_geolocation.info.yml
 create mode 100644 modules/cookies_geolocation/cookies_geolocation.install
 create mode 100644 modules/cookies_geolocation/cookies_geolocation.libraries.yml
 create mode 100644 modules/cookies_geolocation/cookies_geolocation.module
 create mode 100644 modules/cookies_geolocation/css/cookies_geolocation.css
 create mode 100644 modules/cookies_geolocation/css/logo.svg
 create mode 100644 modules/cookies_geolocation/js/cookies_geolocation.js

diff --git a/composer.json b/composer.json
index 4f6fc27..b049a1a 100644
--- a/composer.json
+++ b/composer.json
@@ -17,6 +17,7 @@
         "drupal/facebook_pixel": "^2.0",
         "drupal/google_analytics": "^4.0",
         "drupal/google_tag": "^1.0",
+        "drupal/geolocation": "^3.12",
         "drupal/media_entity_instagram": "^3.0",
         "drupal/ivw_integration": "^2.0",
         "drupal/matomo": "^1.0",
diff --git a/config/install/cookies.cookies_service_group.maps.yml b/config/install/cookies.cookies_service_group.maps.yml
new file mode 100644
index 0000000..f74d3ad
--- /dev/null
+++ b/config/install/cookies.cookies_service_group.maps.yml
@@ -0,0 +1,8 @@
+langcode: en
+status: true
+dependencies: {  }
+id: maps
+label: Maps
+weight: 50
+title: Maps
+details: 'Map services show geographical information on the site.'
diff --git a/modules/cookies_geolocation/config/install/cookies.cookies_service.google_maps.yml b/modules/cookies_geolocation/config/install/cookies.cookies_service.google_maps.yml
new file mode 100644
index 0000000..3e4882f
--- /dev/null
+++ b/modules/cookies_geolocation/config/install/cookies.cookies_service.google_maps.yml
@@ -0,0 +1,22 @@
+langcode: en
+status: true
+dependencies:
+  enforced:
+    module:
+      - cookies_geolocation
+id: google_maps
+label: 'Google Maps'
+group: maps
+weight: 0
+info:
+  format: 'full_html'
+  value: ''
+consentRequired: true
+placeholderMainText: 'This content is blocked because Google Maps cookies have not been accepted.'
+placeholderAcceptText: 'Only accept Google Maps cookies.'
+purpose: ''
+processor: 'Google'
+processorContact: ''
+processorUrl: 'https://www.google.com/maps'
+processorPrivacyPolicyUrl: 'https://policies.google.com/privacy'
+processorCookiePolicyUrl: 'https://policies.google.com/technologies/cookies'
diff --git a/modules/cookies_geolocation/cookies_geolocation.info.yml b/modules/cookies_geolocation/cookies_geolocation.info.yml
new file mode 100644
index 0000000..bc35ce3
--- /dev/null
+++ b/modules/cookies_geolocation/cookies_geolocation.info.yml
@@ -0,0 +1,10 @@
+name: 'COOKiES Geolocation'
+type: module
+description: 'Submodule of COOKiES to manage maps (by "geolocation" module) inside of COOKiES consent management.'
+core_version_requirement: ^8.9 || ^9 || ^10
+package: 'COOKiES'
+dependencies:
+  - cookies:cookies
+  - geolocation:geolocation
+libraries:
+  - cookies_video/default
diff --git a/modules/cookies_geolocation/cookies_geolocation.install b/modules/cookies_geolocation/cookies_geolocation.install
new file mode 100644
index 0000000..299b533
--- /dev/null
+++ b/modules/cookies_geolocation/cookies_geolocation.install
@@ -0,0 +1,27 @@
+<?php
+
+/**
+ * @file
+ * Installation information for the 'Cookies Video' module.
+ */
+
+/**
+ * Implements hook_install().
+ */
+function cookies_geolocation_install() {
+  // Load module after other third-party module.
+  module_set_weight('cookies_geolocation', 11);
+}
+
+/**
+ * Update service config to enforce module dependency 'cookies_geolocation'.
+ */
+function cookies_geolocation_update_8001() {
+  $config = \Drupal::configFactory()
+    ->getEditable('cookies.cookies_service.maps');
+  if (!$config->isNew()) {
+    $dependencies = $config->get('dependencies');
+    $dependencies['enforced']['module'][] = 'cookies_geolocation';
+    $config->set('dependencies', $dependencies)->save(TRUE);
+  }
+}
diff --git a/modules/cookies_geolocation/cookies_geolocation.libraries.yml b/modules/cookies_geolocation/cookies_geolocation.libraries.yml
new file mode 100644
index 0000000..2918496
--- /dev/null
+++ b/modules/cookies_geolocation/cookies_geolocation.libraries.yml
@@ -0,0 +1,9 @@
+default:
+  version: VERSION
+  js:
+    js/cookies_geolocation.js: {}
+  css:
+    component:
+      css/cookies_geolocation.css: {}
+  dependencies:
+    - cookies/cookies.lib
diff --git a/modules/cookies_geolocation/cookies_geolocation.module b/modules/cookies_geolocation/cookies_geolocation.module
new file mode 100644
index 0000000..ba51f7e
--- /dev/null
+++ b/modules/cookies_geolocation/cookies_geolocation.module
@@ -0,0 +1,83 @@
+<?php
+
+/**
+ * @file
+ * Contains cookies_geolocation.module.
+ */
+
+use Drupal\cookies\Constants\CookiesConstants;
+use Drupal\Core\Asset\AttachedAssetsInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\cookies\CookiesKnockOutService;
+use Drupal\geolocation_google_maps\GoogleMapsProviderBase;
+
+/**
+ * Implements hook_help().
+ */
+function cookies_geolocation_help($route_name, RouteMatchInterface $route_match) {
+  switch ($route_name) {
+    // Main module help for the cookies_ga module.
+    case 'help.page.cookies_geolocation':
+      $output = '';
+      $output .= '<h3>' . t('About') . '</h3>';
+      $output .= '<p>' . t('Submodule of COOKiES to manage maps (by "geolocation" module) inside of COOKiES consent management.') . '</p>';
+      return $output;
+
+    default:
+  }
+}
+
+/**
+ * Implements hook_page_attachments().
+ */
+function cookies_geolocation_page_attachments(&$page) {
+  $doKo = CookiesKnockOutService::getInstance()->doKnockOut();
+  if ($doKo) {
+    $page["#attached"]["library"][] = 'cookies_geolocation/default';
+  }
+}
+
+/**
+ * Implements hook_js_alter().
+ */
+function cookies_geolocation_js_alter(array &$javascript, AttachedAssetsInterface $assets) {
+  $doKo = CookiesKnockOutService::getInstance()->doKnockOut();
+  if ($doKo) {
+    /** @var $moduleHandler \Drupal\Core\Extension\ModuleHandler */
+    $moduleHandler = \Drupal::service('module_handler');
+
+    $maps = [];
+    /**
+     * @TODO: check for all map providers, not just Google Maps
+     */
+    if ($moduleHandler->moduleExists('geolocation_google_maps')) {
+      $config = \Drupal::config('geolocation_google_maps.settings');
+
+      if (!empty($config->get('google_maps_base_url'))) {
+        $googleUrl = $config->get('google_maps_base_url');
+      }
+      elseif ($config->get('china_mode')) {
+        $googleUrl = GoogleMapsProviderBase::$googleMapsApiUrlBaseChina;
+      }
+      else {
+        $googleUrl = GoogleMapsProviderBase::$googleMapsApiUrlBase;
+      }
+
+      foreach ($javascript as $key => $js) {
+        if (strpos($key, $googleUrl . GoogleMapsProviderBase::$googleMapsApiUrlPath) === 0) {
+          $maps[] = [$key => 'google_maps'];
+        }
+      }
+    }
+
+    foreach ($maps as $idx => $map) {
+      $file = key($map);
+      $serivceProvider = current($map);
+      if (isset($javascript[$file])) {
+        $javascript[$file]['attributes']['type'] = CookiesConstants::COOKIES_SCRIPT_KO_TYPE;
+        $javascript[$file]['attributes']['id'] = "cookies_geolocation_{$serivceProvider}_{$idx}";
+        $javascript[$file]['attributes']['data-cookieconsent'] = $serivceProvider;
+      }
+    }
+  }
+}
diff --git a/modules/cookies_geolocation/css/cookies_geolocation.css b/modules/cookies_geolocation/css/cookies_geolocation.css
new file mode 100644
index 0000000..a5c6cea
--- /dev/null
+++ b/modules/cookies_geolocation/css/cookies_geolocation.css
@@ -0,0 +1,17 @@
+.geolocation-map-wrapper + .cookies-fallback::before {
+  content: '';
+  position: absolute;
+  top: 2rem;
+  left: 2rem;
+  display: block;
+  width: 106px;
+  height: 123px;
+  max-width: 100%;
+  max-height: 100%;
+  mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 105.93 122.88'%3E%3Cpath fill-rule='evenodd' d='M56.92,73.14a1.62,1.62,0,0,1-1.86.06A65.25,65.25,0,0,1,38.92,58.8,51.29,51.29,0,0,1,28.06,35.37C26.77,27.38,28,19.7,32,13.45a27,27,0,0,1,6-6.66A29.23,29.23,0,0,1,56.36,0,26,26,0,0,1,73.82,7.12a26,26,0,0,1,4.66,5.68c4.27,7,5.19,16,3.31,25.12A55.29,55.29,0,0,1,56.92,73.14Zm-19,.74V101.7l30.15,13V78.87a65.17,65.17,0,0,0,6.45-5.63v41.18l25-12.59v-56l-9.61,3.7a61.61,61.61,0,0,0,2.38-7.81l9.3-3.59A3.22,3.22,0,0,1,105.7,40a3.18,3.18,0,0,1,.22,1.16v62.7a3.23,3.23,0,0,1-2,3L72.72,122.53a3.23,3.23,0,0,1-2.92,0l-35-15.17L4.68,122.53a3.22,3.22,0,0,1-4.33-1.42A3.28,3.28,0,0,1,0,119.66V53.24a3.23,3.23,0,0,1,2.32-3.1L18.7,43.82a58.63,58.63,0,0,0,2.16,6.07L6.46,55.44v59l25-12.59V67.09a76.28,76.28,0,0,0,6.46,6.79ZM55.15,14.21A13.72,13.72,0,1,1,41.43,27.93,13.72,13.72,0,0,1,55.15,14.21Z'/%3E%3C/svg%3E");
+  mask-position: center;
+  mask-size: contain;
+  background-color: currentColor;
+  opacity: 0.1;
+  z-index: -1;
+}
diff --git a/modules/cookies_geolocation/css/logo.svg b/modules/cookies_geolocation/css/logo.svg
new file mode 100644
index 0000000..b9774ce
--- /dev/null
+++ b/modules/cookies_geolocation/css/logo.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 105.93 122.88"><path fill-rule="evenodd" d="M56.92,73.14a1.62,1.62,0,0,1-1.86.06A65.25,65.25,0,0,1,38.92,58.8,51.29,51.29,0,0,1,28.06,35.37C26.77,27.38,28,19.7,32,13.45a27,27,0,0,1,6-6.66A29.23,29.23,0,0,1,56.36,0,26,26,0,0,1,73.82,7.12a26,26,0,0,1,4.66,5.68c4.27,7,5.19,16,3.31,25.12A55.29,55.29,0,0,1,56.92,73.14Zm-19,.74V101.7l30.15,13V78.87a65.17,65.17,0,0,0,6.45-5.63v41.18l25-12.59v-56l-9.61,3.7a61.61,61.61,0,0,0,2.38-7.81l9.3-3.59A3.22,3.22,0,0,1,105.7,40a3.18,3.18,0,0,1,.22,1.16v62.7a3.23,3.23,0,0,1-2,3L72.72,122.53a3.23,3.23,0,0,1-2.92,0l-35-15.17L4.68,122.53a3.22,3.22,0,0,1-4.33-1.42A3.28,3.28,0,0,1,0,119.66V53.24a3.23,3.23,0,0,1,2.32-3.1L18.7,43.82a58.63,58.63,0,0,0,2.16,6.07L6.46,55.44v59l25-12.59V67.09a76.28,76.28,0,0,0,6.46,6.79ZM55.15,14.21A13.72,13.72,0,1,1,41.43,27.93,13.72,13.72,0,0,1,55.15,14.21Z"/></svg>
diff --git a/modules/cookies_geolocation/js/cookies_geolocation.js b/modules/cookies_geolocation/js/cookies_geolocation.js
new file mode 100644
index 0000000..d03741a
--- /dev/null
+++ b/modules/cookies_geolocation/js/cookies_geolocation.js
@@ -0,0 +1,58 @@
+/**
+ * @file
+ * Defines Javascript behaviors for the cookies module.
+ */
+(function (Drupal, $) {
+  'use strict';
+
+  /**
+   * Define defaults.
+   */
+  Drupal.behaviors.cookiesGeolocation = {
+
+    consentGiven: function () {
+      let scripts = document.querySelectorAll('script[id^="cookies_geolocation_"]');
+      scripts.forEach(script => {
+        let newScript = document.createElement('script');
+        script.getAttributeNames().forEach(attr => {
+          if (!['id', 'type'].includes(attr)) {
+            newScript.setAttribute(attr, script.getAttribute(attr));
+          }
+        });
+        if (!newScript.hasAttribute('src')) {
+          newScript.innerHTML = script.innerHTML;
+        }
+        // Replace script.
+        script.parentNode.replaceChild(newScript, script);
+      })
+    },
+
+    consentDenied: function (context) {
+      /**
+       * @TODO Handle all map providers, not just Google Maps
+       */
+      $('.geolocation-map-wrapper[data-map-type=google_maps]', context).each(function () {
+        $(this).cookiesOverlay($(this).attr('data-map-type'));
+      });
+    },
+
+
+    attach: function (context) {
+      var self = this;
+      document.addEventListener('cookiesjsrUserConsent', function (event) {
+        const services =
+          typeof event.detail.services === "object"
+            ? event.detail.services
+            : {};
+        Object.entries(services).forEach((service) => {
+          if (typeof service[1] !== "undefined" && service[1]) {
+            self.consentGiven(context, service[0]);
+          }
+          else {
+            self.consentDenied(context, service[0]);
+          }
+        });
+      });
+    },
+  }
+})(Drupal, jQuery);
-- 
GitLab


From 0cc9c4198e9ff0b53b46786721511cd35d853183 Mon Sep 17 00:00:00 2001
From: "Webtourismus.at" <entwicklung@webtourismus.at>
Date: Fri, 17 Mar 2023 11:31:06 +0100
Subject: [PATCH 2/5] Add tests for Google maps

---
 .../cookies_geolocation.install               |   4 +-
 .../CookiesGeolocationFunctionalTest.php      |  96 ++++++++++++
 .../CookiesGeolocationFunctionalJsTest.php    | 143 ++++++++++++++++++
 3 files changed, 241 insertions(+), 2 deletions(-)
 create mode 100644 modules/cookies_geolocation/tests/src/Functional/CookiesGeolocationFunctionalTest.php
 create mode 100644 modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php

diff --git a/modules/cookies_geolocation/cookies_geolocation.install b/modules/cookies_geolocation/cookies_geolocation.install
index 299b533..98f1a27 100644
--- a/modules/cookies_geolocation/cookies_geolocation.install
+++ b/modules/cookies_geolocation/cookies_geolocation.install
@@ -2,7 +2,7 @@
 
 /**
  * @file
- * Installation information for the 'Cookies Video' module.
+ * Installation information for the 'Cookies geolocation' module.
  */
 
 /**
@@ -18,7 +18,7 @@ function cookies_geolocation_install() {
  */
 function cookies_geolocation_update_8001() {
   $config = \Drupal::configFactory()
-    ->getEditable('cookies.cookies_service.maps');
+    ->getEditable('cookies.cookies_service.google_maps');
   if (!$config->isNew()) {
     $dependencies = $config->get('dependencies');
     $dependencies['enforced']['module'][] = 'cookies_geolocation';
diff --git a/modules/cookies_geolocation/tests/src/Functional/CookiesGeolocationFunctionalTest.php b/modules/cookies_geolocation/tests/src/Functional/CookiesGeolocationFunctionalTest.php
new file mode 100644
index 0000000..7fa3aeb
--- /dev/null
+++ b/modules/cookies_geolocation/tests/src/Functional/CookiesGeolocationFunctionalTest.php
@@ -0,0 +1,96 @@
+<?php
+
+namespace Drupal\Tests\cookies_geolocation\Functional;
+
+use Drupal\Tests\BrowserTestBase;
+
+/**
+ * This class provides methods specifically for testing something.
+ *
+ * @group cookies_geolocation
+ */
+class CookiesGeolocationFunctionalTest extends BrowserTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'node',
+    'test_page_test',
+    'cookies',
+    'cookies_geolocation',
+    'geolocation',
+    'geolocation_google_maps',
+    'geolocation_google_maps_test',
+  ];
+
+  /**
+   * A user with authenticated permissions.
+   *
+   * @var \Drupal\Core\Session\AccountInterface
+   */
+  protected $user;
+
+  /**
+   * A user with admin permissions.
+   *
+   * @var \Drupal\Core\Session\AccountInterface
+   */
+  protected $adminUser;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $this->config('system.site')->set('page.front', '/test-page')->save();
+    $this->user = $this->drupalCreateUser([]);
+    $this->adminUser = $this->drupalCreateUser([]);
+    $this->adminUser->addRole($this->createAdminRole('admin', 'admin'));
+    $this->adminUser->save();
+    $this->drupalLogin($this->adminUser);
+  }
+
+  /**
+   * Tests if installing the module, won't break the site.
+   */
+  public function testInstallation() {
+    $session = $this->assertSession();
+    $this->drupalGet('<front>');
+    // Ensure the status code is success:
+    $session->statusCodeEquals(200);
+    // Ensure the correct test page is loaded as front page:
+    $session->pageTextContains('Test page text.');
+  }
+
+  /**
+   * Tests if uninstalling the module, won't break the site.
+   */
+  public function testUninstallation() {
+    // Go to uninstallation page an uninstall cookies_video:
+    $session = $this->assertSession();
+    $page = $this->getSession()->getPage();
+    $this->drupalGet('/admin/modules/uninstall');
+    $session->statusCodeEquals(200);
+    $page->checkField('edit-uninstall-cookies-geolocation');
+    $page->pressButton('edit-submit');
+    $session->statusCodeEquals(200);
+    // Confirm uninstall:
+    $page->pressButton('edit-submit');
+    $session->statusCodeEquals(200);
+    $session->pageTextContains('The selected modules have been uninstalled.');
+    // Retest the frontpage:
+    $this->drupalGet('<front>');
+    // Ensure the status code is success:
+    $session->statusCodeEquals(200);
+    // Ensure the correct test page is loaded as front page:
+    $session->pageTextContains('Test page text.');
+  }
+
+}
diff --git a/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php b/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
new file mode 100644
index 0000000..50ffbf8
--- /dev/null
+++ b/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
@@ -0,0 +1,143 @@
+<?php
+
+namespace Drupal\Tests\cookies_geolocation\FunctionalJavascript;
+
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\Tests\cookies\FunctionalJavascript\CookiesFunctionalJsTestBase;
+
+/**
+ * Class for testing the cookies_geolocation submodule.
+ *
+ * @group cookies_geolocation
+ */
+class CookiesGeolocationFunctionalJsTest extends CookiesFunctionalJsTestBase {
+
+  /**
+   * Default theme.
+   *
+   * @var string
+   */
+  protected $defaultTheme = 'claro';
+
+  /**
+   * A test node.
+   *
+   * @var \Drupal\node\NodeInterface
+   */
+  protected $node;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'node',
+    'field_ui',
+    'cookies',
+    'cookies_geolocation',
+    'geolocation',
+    'geolocation_google_maps',
+    'geolocation_google_maps_test',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
+
+    // Add the geolocation field to the article content type.
+    FieldStorageConfig::create([
+      'field_name' => 'field_geolocation',
+      'entity_type' => 'node',
+      'type' => 'geolocation',
+    ])->save();
+    FieldConfig::create([
+      'field_name' => 'field_geolocation',
+      'label' => 'Geolocation',
+      'entity_type' => 'node',
+      'bundle' => 'article',
+    ])->save();
+
+    EntityFormDisplay::load('node.article.default')
+      ->setComponent('field_geolocation', [
+        'type' => 'geolocation_latlng',
+      ])
+      ->save();
+
+    EntityViewDisplay::load('node.article.default')
+      ->setComponent('field_geolocation', [
+        'type' => 'geolocation_map',
+        'settings' => [
+          'use_overridden_map_settings' => FALSE,
+          'map_provider_id' => 'google_maps',
+          'set_marker' => TRUE,
+          'common_map' => TRUE,
+          'map_provider_settings' => [
+            'width' => '100%',
+            'height' => '400px',
+          ]
+        ],
+        'weight' => 1,
+      ])
+      ->save();
+
+    $this->node = $this->drupalCreateNode([
+      'id' => 1,
+      'title' => 'Google Maps test',
+      'type' => 'article',
+      'body' => 'This content tests if the Google Map is shown only after accepting cookies',
+      'field_geolocation' => [
+        'lat' => 52,
+        'lng' => 47,
+      ],
+    ])->save();
+
+  }
+
+
+  /**
+   * Tests the CommonMap style.
+   */
+  public function testLeafletMap() {
+    $this->drupalGet('geolocation-leaflet-test');
+
+    $this->assertSession()->elementExists('css', '.geolocation-map-container');
+    $this->assertSession()->elementExists('css', '.geolocation-location');
+    $result = $this->assertSession()->waitForElementVisible('css', 'img[title="Location 2"]');
+    $this->assertNotEmpty($result);
+  }
+
+
+  /**
+   * Tests correct field display after consent.
+   *
+   * Tests the correct display of a media field used inside a node after
+   * consent, when three media items are displayed in the same field.
+   */
+  public function testGoogleMaps() {
+    $session = $this->assertSession();
+    $this->drupalGet('node/' . $this->node->id());
+    // Check if map field container is shown
+    $session->elementExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper');
+    // Check if map is does not exist
+    $session->elementNotExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper div.geolocation-map-container div.gm-style');
+    // Check if the blocking message exist:
+    $session->elementExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper + div.cookies-fallback--google_maps');
+
+    // Fire consent script, accept all cookies:
+    $script = "var options = { all: true };
+        document.dispatchEvent(new CustomEvent('cookiesjsrSetService', { detail: options }));";
+    $this->getSession()->getDriver()->executeScript($script);
+
+    // Check if map is not shown
+    $session->elementExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper div.geolocation-map-container div.gm-style');
+    // Check if the blocking message exist:
+    $session->elementNotExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper + div.cookies-fallback--google_maps');
+  }
+
+}
-- 
GitLab


From d00b790c20c07482b3d8c2190d8bd96c72ad0f99 Mon Sep 17 00:00:00 2001
From: "Webtourismus.at" <entwicklung@webtourismus.at>
Date: Fri, 17 Mar 2023 11:50:25 +0100
Subject: [PATCH 3/5] Minor cleanups in test files

---
 .../CookiesGeolocationFunctionalJsTest.php      | 17 ++---------------
 1 file changed, 2 insertions(+), 15 deletions(-)

diff --git a/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php b/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
index 50ffbf8..6444766 100644
--- a/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
+++ b/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
@@ -100,19 +100,6 @@ class CookiesGeolocationFunctionalJsTest extends CookiesFunctionalJsTestBase {
   }
 
 
-  /**
-   * Tests the CommonMap style.
-   */
-  public function testLeafletMap() {
-    $this->drupalGet('geolocation-leaflet-test');
-
-    $this->assertSession()->elementExists('css', '.geolocation-map-container');
-    $this->assertSession()->elementExists('css', '.geolocation-location');
-    $result = $this->assertSession()->waitForElementVisible('css', 'img[title="Location 2"]');
-    $this->assertNotEmpty($result);
-  }
-
-
   /**
    * Tests correct field display after consent.
    *
@@ -134,9 +121,9 @@ class CookiesGeolocationFunctionalJsTest extends CookiesFunctionalJsTestBase {
         document.dispatchEvent(new CustomEvent('cookiesjsrSetService', { detail: options }));";
     $this->getSession()->getDriver()->executeScript($script);
 
-    // Check if map is not shown
+    // Check if map is shown
     $session->elementExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper div.geolocation-map-container div.gm-style');
-    // Check if the blocking message exist:
+    // Check if the blocking message does not exist:
     $session->elementNotExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper + div.cookies-fallback--google_maps');
   }
 
-- 
GitLab


From 627df6629d1fb28c3ee40a8a543267d5e3c6a150 Mon Sep 17 00:00:00 2001
From: "Webtourismus.at" <entwicklung@webtourismus.at>
Date: Fri, 17 Mar 2023 12:21:26 +0100
Subject: [PATCH 4/5] Fix failing tests

---
 .../CookiesGeolocationFunctionalJsTest.php                  | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php b/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
index 6444766..3e1b8c0 100644
--- a/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
+++ b/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
@@ -95,7 +95,7 @@ class CookiesGeolocationFunctionalJsTest extends CookiesFunctionalJsTestBase {
         'lat' => 52,
         'lng' => 47,
       ],
-    ])->save();
+    ]);
 
   }
 
@@ -121,9 +121,9 @@ class CookiesGeolocationFunctionalJsTest extends CookiesFunctionalJsTestBase {
         document.dispatchEvent(new CustomEvent('cookiesjsrSetService', { detail: options }));";
     $this->getSession()->getDriver()->executeScript($script);
 
-    // Check if map is shown
+    // Check if map is now loaded
     $session->elementExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper div.geolocation-map-container div.gm-style');
-    // Check if the blocking message does not exist:
+    // Check if the blocking message does no longer exist:
     $session->elementNotExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper + div.cookies-fallback--google_maps');
   }
 
-- 
GitLab


From 73c5646fe99c7c7fb0ed2e18fc0490882dd76aae Mon Sep 17 00:00:00 2001
From: "Webtourismus.at" <entwicklung@webtourismus.at>
Date: Fri, 17 Mar 2023 13:09:55 +0100
Subject: [PATCH 5/5] Fix test Ajax handling, add test screenshots

---
 .../CookiesGeolocationFunctionalJsTest.php                    | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php b/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
index 3e1b8c0..3a0bc24 100644
--- a/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
+++ b/modules/cookies_geolocation/tests/src/FunctionalJavascript/CookiesGeolocationFunctionalJsTest.php
@@ -115,16 +115,20 @@ class CookiesGeolocationFunctionalJsTest extends CookiesFunctionalJsTestBase {
     $session->elementNotExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper div.geolocation-map-container div.gm-style');
     // Check if the blocking message exist:
     $session->elementExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper + div.cookies-fallback--google_maps');
+    $this->createScreenshot(\Drupal::root() . '/sites/default/files/simpletest/google_map_blocked.png');
 
     // Fire consent script, accept all cookies:
     $script = "var options = { all: true };
         document.dispatchEvent(new CustomEvent('cookiesjsrSetService', { detail: options }));";
     $this->getSession()->getDriver()->executeScript($script);
 
+    // Wait for the Map to be loaded
+    $session->waitForElementVisible('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper div.geolocation-map-container div.gm-style');
     // Check if map is now loaded
     $session->elementExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper div.geolocation-map-container div.gm-style');
     // Check if the blocking message does no longer exist:
     $session->elementNotExists('css', 'div.field.field--name-field-geolocation div.geolocation-map-wrapper + div.cookies-fallback--google_maps');
+    $this->createScreenshot(\Drupal::root() . '/sites/default/files/simpletest/google_map_loaded.png');
   }
 
 }
-- 
GitLab

