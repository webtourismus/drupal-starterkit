diff --git a/core/modules/config_translation/config_translation.module b/core/modules/config_translation/config_translation.module
index b984783a9d..f5fea3a91e 100644
--- a/core/modules/config_translation/config_translation.module
+++ b/core/modules/config_translation/config_translation.module
@@ -7,9 +7,11 @@
 
 use Drupal\Core\Url;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\field\FieldConfigInterface;
+use Drupal\config_translation\Controller\ConfigTranslationEntityDisplayListBuilder;
 
 /**
  * Implements hook_help().
@@ -86,6 +88,10 @@ function config_translation_entity_type_alter(array &$entity_types) {
         // Will be filled in dynamically, see \Drupal\field\Entity\FieldConfig::linkTemplates().
         $entity_type->setLinkTemplate('config-translation-overview', $entity_type->getLinkTemplate('edit-form') . '/translate');
       }
+      elseif ($entity_type->entityClassImplements(EntityDisplayInterface::class)) {
+        $class = ConfigTranslationEntityDisplayListBuilder::class;
+        // @todo Link template is not used but should be set so other logic can apply.
+      }
       else {
         $class = 'Drupal\config_translation\Controller\ConfigTranslationEntityListBuilder';
       }
@@ -104,24 +110,6 @@ function config_translation_entity_type_alter(array &$entity_types) {
 function config_translation_config_translation_info(&$info) {
   $entity_type_manager = \Drupal::entityTypeManager();
 
-  // If field UI is not enabled, the base routes of the type
-  // "entity.field_config.{$entity_type}_field_edit_form" are not defined.
-  if (\Drupal::moduleHandler()->moduleExists('field_ui')) {
-    // Add fields entity mappers to all fieldable entity types defined.
-    foreach ($entity_type_manager->getDefinitions() as $entity_type_id => $entity_type) {
-      // Make sure entity type has field UI enabled and has a base route.
-      if ($entity_type->get('field_ui_base_route')) {
-        $info[$entity_type_id . '_fields'] = [
-          'base_route_name' => "entity.field_config.{$entity_type_id}_field_edit_form",
-          'entity_type' => 'field_config',
-          'class' => '\Drupal\config_translation\ConfigFieldMapper',
-          'base_entity_type' => $entity_type_id,
-          'weight' => 10,
-        ];
-      }
-    }
-  }
-
   // Discover configuration entities automatically.
   foreach ($entity_type_manager->getDefinitions() as $entity_type_id => $entity_type) {
     // Determine base path for entities automatically if provided via the
diff --git a/core/modules/config_translation/src/Controller/ConfigTranslationEntityDisplayListBuilder.php b/core/modules/config_translation/src/Controller/ConfigTranslationEntityDisplayListBuilder.php
new file mode 100644
index 0000000000..b0180b356c
--- /dev/null
+++ b/core/modules/config_translation/src/Controller/ConfigTranslationEntityDisplayListBuilder.php
@@ -0,0 +1,118 @@
+<?php
+
+namespace Drupal\config_translation\Controller;
+
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Url;
+
+/**
+ * Defines the config translation list builder for entity display entities.
+ */
+class ConfigTranslationEntityDisplayListBuilder extends ConfigTranslationFieldListBuilder {
+
+  /**
+   * Context display id.
+   *
+   * @var string
+   */
+  protected $displayContext;
+
+  /**
+   * Constructs a new ConfigTranslationEntityDisplayListBuilder object.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   *   The entity type definition.
+   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   *   The entity storage class.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   *   The entity type bundle info.
+   */
+  public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
+    parent::__construct($entity_type, $storage, $entity_type_manager, $entity_type_bundle_info);
+    // @todo There must be a better way to get this information?
+    $this->displayContext = preg_replace('/^entity_(.+)_display$/', '\1', $this->entityType->id());
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function load() {
+    // It is not possible to use the standard load method, because this needs
+    // all display entities only for the given baseEntityType.
+    $ids = \Drupal::entityQuery($this->entityType->id())
+      ->accessCheck(TRUE)
+      ->condition('id', $this->baseEntityType . '.', 'STARTS_WITH')
+      ->execute();
+    return $this->storage->loadMultiple($ids);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFilterLabels() {
+    $info = parent::getFilterLabels();
+    $bundle = $this->baseEntityInfo->getBundleLabel() ?: $this->t('Bundle');
+    $bundle = mb_strtolower($bundle);
+    $info['placeholder'] = $this->t('Enter mode or @bundle', [
+      '@bundle' => $bundle,
+    ]);
+    $info['description'] = $this->t('Enter a part of the mode or @bundle to filter by.', [
+      '@bundle' => $bundle,
+    ]);
+    return $info;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildRow(EntityInterface $entity) {
+    $row = parent::buildRow($entity);
+    $row['label']['data'] = $entity->getMode() == 'default' ? $this->t('Default') : $this->entityTypeManager
+      ->getStorage('entity_' . $this->displayContext . '_mode')
+      ->load($entity->getTargetEntityTypeId() . '.' . $entity->getMode())
+      ->label();
+    return $row;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildHeader() {
+    $header = parent::buildHeader();
+    $header['label'] = $this->entityType->getLabel();
+    return $header;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getOperations(EntityInterface $entity) {
+    // Entity displays have no canonical no direct edit-form links so we
+    // hard-code the route to the translation operation.
+    // @todo Use config-translation-overview link template like field_ui does.
+    $route_parameters = [
+      $this->displayContext . '_mode_name' => $entity->getMode(),
+    ];
+
+    $bundle_type = $this->entityTypeManager
+      ->getDefinition($entity->getTargetEntityTypeId())
+      ->getBundleEntityType();
+    if ($bundle_type) {
+      $route_parameters[$bundle_type] = $entity->getTargetBundle();
+    }
+
+    $operations['translate'] = [
+      'title' => $this->t('Translate'),
+      'url' => $this->ensureDestination(Url::fromRoute("entity.{$this->entityType->id()}.config_translation_overview.{$entity->getTargetEntityTypeId()}", $route_parameters)),
+    ];
+
+    return $operations;
+  }
+
+}
diff --git a/core/modules/config_translation/tests/src/Functional/ConfigTranslationListUiTest.php b/core/modules/config_translation/tests/src/Functional/ConfigTranslationListUiTest.php
index 7ef91af4a0..d569a33754 100644
--- a/core/modules/config_translation/tests/src/Functional/ConfigTranslationListUiTest.php
+++ b/core/modules/config_translation/tests/src/Functional/ConfigTranslationListUiTest.php
@@ -485,6 +485,54 @@ public function doSettingsPageTest($link) {
     $this->assertSession()->responseContains('<th>Language</th>');
   }
 
+  /**
+   * Test entity form translation operation.
+   */
+  public function doEntityFormTest() {
+    $content_type = $this->drupalCreateContentType([
+      'type' => mb_strtolower($this->randomMachineName(16)),
+      'name' => $this->randomMachineName(),
+    ]);
+
+    ConfigurableLanguage::createFromLangcode('de')->save();
+
+    $this->drupalGet('admin/config/regional/config-translation');
+    $this->assertSession()->linkByHrefExists('admin/config/regional/config-translation/node_form_display');
+
+    $this->drupalGet('admin/config/regional/config-translation/node_form_display');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkByHrefExists('admin/structure/types/manage/' . $content_type->id() . '/form-display/default/translate');
+
+    $this->drupalGet('admin/structure/types/manage/' . $content_type->id() . '/form-display/default/translate');
+    $this->assertSession()->statusCodeEquals(200);
+
+    $this->drupalGet('admin/structure/types/manage/' . $content_type->id() . '/form-display/default/translate/de/edit');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('Field widgets');
+    $this->assertSession()->pageTextContains('Body');
+  }
+
+  /**
+   * Test entity view display translation operation.
+   */
+  public function doViewDisplayTest() {
+    $content_type = $this->drupalCreateContentType([
+      'type' => mb_strtolower($this->randomMachineName(16)),
+      'name' => $this->randomMachineName(),
+    ]);
+
+    $this->drupalGet('admin/config/regional/config-translation');
+    $this->assertSession()->linkByHrefExists('admin/config/regional/config-translation/node_view_display');
+
+    $this->drupalGet('admin/config/regional/config-translation/node_view_display');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->linkByHrefExists('/admin/structure/types/manage/' . $content_type->id() . '/display/default/translate');
+
+    // There are no translatable fields so 403 will be thrown.
+    $this->drupalGet('admin/structure/types/manage/' . $content_type->id() . '/display/default/translate');
+    $this->assertSession()->statusCodeEquals(403);
+  }
+
   /**
    * Tests if translate link is added to operations in all configuration lists.
    */
@@ -504,9 +552,10 @@ public function testTranslateOperationInListUi() {
     $this->doResponsiveImageListTest();
     $this->doDateFormatListTest();
     $this->doFieldListTest();
+    $this->doEntityFormTest();
+    $this->doViewDisplayTest();
 
-    // Views is tested in Drupal\config_translation\Tests\ConfigTranslationViewListUiTest
-
+    // Views is tested in Drupal\config_translation\Tests\ConfigTranslationViewListUiTest.
     // Test the maintenance settings page.
     $this->doSettingsPageTest('admin/config/development/maintenance');
     // Test the site information settings page.
diff --git a/core/modules/field_ui/field_ui.module b/core/modules/field_ui/field_ui.module
index 5f1fe78eb3..8adbe4898a 100644
--- a/core/modules/field_ui/field_ui.module
+++ b/core/modules/field_ui/field_ui.module
@@ -7,12 +7,14 @@
 
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Render\Element;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Entity\EntityViewModeInterface;
 use Drupal\Core\Entity\EntityFormModeInterface;
 use Drupal\Core\Url;
 use Drupal\field_ui\FieldUI;
 use Drupal\field_ui\Plugin\Derivative\FieldUiLocalTask;
+use Drupal\field_ui\ConfigTranslation\EntityDisplayMapper;
 
 /**
  * Implements hook_help().
@@ -225,7 +227,7 @@ function field_ui_entity_form_mode_delete(EntityFormModeInterface $form_mode) {
  *   - elements: An associative array containing a Form API structure to be
  *     rendered as a table.
  */
-function template_preprocess_field_ui_table(&$variables) {
+function template_preprocess_field_ui_table(array &$variables) {
   template_preprocess_table($variables);
 }
 
@@ -248,3 +250,112 @@ function field_ui_form_field_ui_field_storage_add_form_alter(array &$form) {
   unset($form['add']['new_storage_type']['#options'][$optgroup]['entity_reference']);
   $form['add']['new_storage_type']['#options'][$optgroup]['entity_reference'] = t('Other…');
 }
+
+/**
+ * Implements hook_config_translation_info().
+ */
+function field_ui_config_translation_info(&$info) {
+  $entity_type_manager = \Drupal::entityTypeManager();
+
+  // Add fields entity mappers to all fieldable entity types defined.
+  foreach ($entity_type_manager->getDefinitions() as $entity_type_id => $entity_type) {
+    // Make sure entity type has field UI enabled and has a base route.
+    if ($entity_type->get('field_ui_base_route')) {
+      $info[$entity_type_id . '_fields'] = [
+        'base_route_name' => "entity.field_config.{$entity_type_id}_field_edit_form",
+        'entity_type' => 'field_config',
+        'class' => '\Drupal\config_translation\ConfigFieldMapper',
+        'base_entity_type' => $entity_type_id,
+        'weight' => 10,
+      ];
+      $info[$entity_type_id . '_form_display'] = [
+        'base_route_name' => "entity.entity_form_display.{$entity_type_id}.form_mode",
+        'entity_type' => 'entity_form_display',
+        'class' => EntityDisplayMapper::class,
+        'base_entity_type' => $entity_type_id,
+        'display_context' => 'form',
+        'weight' => 10,
+      ];
+      $info[$entity_type_id . '_view_display'] = [
+        'base_route_name' => "entity.entity_view_display.{$entity_type_id}.view_mode",
+        'entity_type' => 'entity_view_display',
+        'class' => EntityDisplayMapper::class,
+        'base_entity_type' => $entity_type_id,
+        'display_context' => 'view',
+        'weight' => 10,
+      ];
+    }
+  }
+}
+
+/**
+ * Implements hook_form_BASE_FORM_ID_alter().
+ */
+function field_ui_form_config_translation_form_alter(&$form, FormStateInterface $form_state) {
+  /** @var \Drupal\config_translation\ConfigMapperInterface $mapper **/
+  $mapper = $form_state->get('config_translation_mapper');
+
+  if ($mapper instanceof EntityDisplayMapper) {
+    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+    $field_manager = \Drupal::service('entity_field.manager');
+    /** @var \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager */
+    $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
+    /** @var \Drupal\Core\Field\FormatterPluginManager $field_formatter_manager */
+    $field_formatter_manager = \Drupal::service('plugin.manager.field.formatter');
+    /** @var \Drupal\Core\Field\WidgetPluginManager $field_widget_manager */
+    $field_widget_manager = \Drupal::service('plugin.manager.field.widget');
+
+    /** @var  \Drupal\Core\Entity\Display\EntityDisplayInterface $entity */
+    $entity = $mapper->getEntity();
+
+    // Configuration name will be also used as element name.
+    $config_key = $entity->getConfigDependencyName();
+    $form_elements = &$form['config_names'][$config_key];
+    $form_elements['content']['#collapsible'] = FALSE;
+
+    $target_type_id = $entity->getTargetEntityTypeId();
+    $bundle_name = $entity->getTargetBundle();
+    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
+    $field_definitions = $field_manager->getFieldDefinitions($target_type_id, $bundle_name);
+    /** @var array $components */
+    $components = $entity->getComponents();
+    // Match element keys that are in components and also have some field definition.
+    $element_names = array_intersect(array_keys($components), Element::children($form_elements['content']), array_keys($field_definitions));
+
+    foreach ($element_names as $component_name) {
+      // Set field name and some description.
+      /** @var \Drupal\Core\Field\FieldDefinitionInterface $definition */
+      $definition = $field_definitions[$component_name];
+      $field_type = $field_type_manager->getDefinition($definition->getType());
+
+      $form_elements['content'][$component_name]['#title'] = $definition->getLabel();
+      $form_elements['content'][$component_name]['#description'] = t("Field %name, type: @type", ['%name' => $component_name, '@type' => $field_type['label']]);
+
+      $component_type = $components[$component_name]['type'];
+
+      switch ($entity->getEntityTypeId()) {
+        case 'entity_view_display':
+          /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity */
+          // Set formatter type name if available.
+          $formatter_options = $field_formatter_manager->getOptions($definition->getType());
+          if (isset($formatter_options[$component_type]) && isset($form_elements['content'][$component_name]['settings'])) {
+            $form_elements['content'][$component_name]['settings']['#title'] = t("%label format settings", ['%label' => $formatter_options[$component_type]]);
+          }
+          break;
+
+        case 'entity_form_display':
+          /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity */
+          // Set widget name if available.
+          $widget_options = $field_widget_manager->getOptions($definition->getType());
+          if (isset($widget_options[$component_type]) && isset($form_elements['content'][$component_name]['settings'])) {
+            $form_elements['content'][$component_name]['settings']['#title'] = t("%label widget settings", ['%label' => $widget_options[$component_type]]);
+          }
+          break;
+
+        default:
+          throw new \Exception(sprintf("Entity display not supported for translation: %s (%s)", $entity->getEntityTypeId(), get_class($entity)));
+      }
+    }
+
+  }
+}
diff --git a/core/modules/field_ui/src/ConfigTranslation/EntityDisplayMapper.php b/core/modules/field_ui/src/ConfigTranslation/EntityDisplayMapper.php
new file mode 100644
index 0000000000..c9ef1c167d
--- /dev/null
+++ b/core/modules/field_ui/src/ConfigTranslation/EntityDisplayMapper.php
@@ -0,0 +1,112 @@
+<?php
+
+namespace Drupal\field_ui\ConfigTranslation;
+
+use Drupal\config_translation\ConfigEntityMapper;
+use Drupal\Core\Routing\RouteMatchInterface;
+
+/**
+ * Provides a configuration mapper for entity displays.
+ */
+class EntityDisplayMapper extends ConfigEntityMapper {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getBaseRouteParameters() {
+    $base_entity_info = $this->entityTypeManager
+      ->getDefinition($this->pluginDefinition['base_entity_type']);
+    $bundle_parameter_key = $base_entity_info
+      ->getBundleEntityType() ?: 'bundle';
+
+    $parameters = [];
+    $parameters[$bundle_parameter_key] = $this->entity->getTargetBundle();
+    $parameters[$this->pluginDefinition['display_context'] . '_mode_name'] = $this->entity->getMode();
+
+    return $parameters;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getOverviewRouteName() {
+    return "entity.{$this->entityType}.config_translation_overview.{$this->pluginDefinition['base_entity_type']}";
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getTitle() {
+    $base_entity_info = $this->entityTypeManager
+      ->getDefinition($this->pluginDefinition['base_entity_type']);
+    $bundle = $base_entity_info->getLabel();
+    if ($bundle_type = $base_entity_info->getBundleEntityType()) {
+      $bundle = $this->entityTypeManager
+        ->getStorage($bundle_type)
+        ->load($this->entity->getTargetBundle())
+        ->label();
+    }
+
+    $mode = $this->entityTypeManager
+      ->getStorage("entity_{$this->pluginDefinition['display_context']}_mode")
+      ->load($this->pluginDefinition['base_entity_type'] . '.' . $this->entity->getMode());
+    $mode = $mode ? $mode->label() : $this->t('Default');
+
+    if ($this->entityType == 'entity_view_display') {
+      return $this->t('@bundle @mode display', [
+        '@bundle' => $bundle,
+        '@mode' => $mode,
+      ]);
+    }
+    elseif ($this->entityType == 'entity_form_display') {
+      return $this->t('@bundle @mode form display', [
+        '@bundle' => $bundle,
+        '@mode' => $mode,
+      ]);
+    }
+    return parent::getTypeLabel();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getTypeLabel() {
+    $base_entity_info = $this->entityTypeManager
+      ->getDefinition($this->pluginDefinition['base_entity_type']);
+
+    if ($this->entityType == 'entity_view_display') {
+      return $this->t('@label view display', [
+        '@label' => $base_entity_info->getLabel(),
+      ]);
+    }
+    elseif ($this->entityType == 'entity_form_display') {
+      return $this->t('@label form display', [
+        '@label' => $base_entity_info->getLabel(),
+      ]);
+    }
+    return parent::getTypeLabel();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function populateFromRouteMatch(RouteMatchInterface $route_match) {
+    $bundle_entity_type = $this->entityTypeManager
+      ->getDefinition($this->pluginDefinition['base_entity_type'])
+      ->getBundleEntityType();
+    $bundle = $route_match->getParameter($bundle_entity_type ?: 'bundle') ?: $this->pluginDefinition['base_entity_type'];
+    $mode = $route_match->getParameter($this->pluginDefinition['display_context'] . '_mode_name') ?: 'default';
+
+    $entity = $this->entityTypeManager
+      ->getStorage($this->entityType)
+      ->load("{$this->pluginDefinition['base_entity_type']}.{$bundle}.{$mode}");
+
+    if ($entity) {
+      $route_match->getParameters()->set($this->entityType, $entity);
+
+      $this->setEntity($entity);
+      parent::populateFromRouteMatch($route_match);
+    }
+  }
+
+}
