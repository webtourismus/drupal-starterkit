<?php

declare(strict_types=1);

use Drupal\block\Entity\Block;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\ebr_teaser\Entity\ParagraphTeaserableInterface;
use Drupal\designsystem\DesignHelper;

function frontend_theme_suggestions_block_alter(array &$suggestions, array $variables): void {
  $blockId = NULL;
  if (isset($variables['elements']['#id'])) {
    $blockId = $variables['elements']['#id'];
  }
  $blockConfig = Block::load($blockId);
  $region = $blockConfig?->getRegion();

  if (isset($variables['elements']['content']['#block_content']) &&
    $variables['elements']['content']['#block_content'] instanceof ContentEntityInterface
  ) {
    $blockContentEntity = $variables['elements']['content']['#block_content'];
    if ($suggestions[0] == 'block__block_content' && $suggestions[1] == 'block__block_content') {
      unset($suggestions[1]);
      $suggestions = array_values($suggestions);
    }
    if ($region) {
      array_splice($suggestions, 1, 0, "block__region__{$region}__block_content__{$blockContentEntity->bundle()}");
    }
    array_splice($suggestions, 1, 0, "block__block_content__{$blockContentEntity->bundle()}");
  }

  if ($region) {
    array_splice($suggestions, 1, 0, "block__region__{$region}");
  }
}
function frontend_preprocess_block(array &$variables): void {
  _frontend_preprocess_block_blockcontent($variables);
  _frontend_preprocess_block_menu($variables);
}


/**
 * Preprocess function for block_content blocks
 * (placed inside a theme's region with Drupal core's block layout).
 */
function _frontend_preprocess_block_blockcontent(array &$variables): void {
  if ($variables['base_plugin_id'] !== 'block_content') {
    return;
  }
  // Use title from "block_content" content entity instead of "block" config entity.
  // This allows editors to edit and translate block titles.
  if (!empty($variables['label'])) {
    $variables['label'] = $variables['content']['#block_content']->label();
  }
}

/**
 * Preprocess function for block_content entities,
 * also including block_content entities not placed with Drupal core's block layout.
 *
 * @see https://www.drupal.org/project/block_content_template
 */
function frontend_preprocess_block_content(&$variables) {
  if (isset($variables['elements']['#block_content'])) {
    $variables['block_content'] = $variables['elements']['#block_content'];
  }
}

function _frontend_preprocess_block_menu(array &$variables): void {
  if ($variables['base_plugin_id'] !== 'system_menu_block') {
    return;
  }
  // @see frontend_theme_suggestions_menu_alter()
  $blockId = $variables['elements']['#id'];
  $blockConfig = Block::load($blockId);
  $region = $blockConfig?->getRegion();
  if ($region) {
    $variables['content']['#attributes']['data-drupal-region'] = $region;
    $variables['content']['#cache']['tags'][] = "block:{$blockId}";
  }
}

function frontend_theme_suggestions_menu_alter(array &$suggestions, array $variables): void {
  // @see _frontend_preprocess_block_menu()
  if (isset($variables['attributes']['data-drupal-region'])) {
    array_unshift($suggestions, 'menu__region__' . str_replace('-', '_', $variables['attributes']['data-drupal-region']));
  }
}
function frontend_theme_suggestions_field_alter(array &$suggestions, array $variables): void {
  $entityType = $variables['element']['#entity_type'];
  $bundle = $variables['element']['#bundle'];
  $fieldName = $variables['element']['#field_name'];

  $viewMode = DesignHelper::getRealViewmode($variables);
  $suggestions[] = "field__{$entityType}__{$fieldName}__{$bundle}__{$viewMode}";
  array_splice($suggestions, 2, 0, "field__{$fieldName}__{$viewMode}");

  if (isset($variables['element']['#teaser_fieldname'])) {
    $teaserField = $variables['element']['#teaser_fieldname'];
    if ($variables['element']['#object'] instanceof ParagraphTeaserableInterface) {
      $targetEntity = $variables['element']['#object']->getReferencedEntity();
    }
    if (empty($targetEntity)) {
      $targetEntity = $variables['element']['#object'];
    }
    array_splice($suggestions, -1, 0, "field__teaserable__{$targetEntity->bundle()}__{$teaserField}");
    $suggestions[] = "field__teaserable__{$targetEntity->bundle()}__{$teaserField}__{$viewMode}";
    array_splice($suggestions, 3, 0, "field__teaserable__{$teaserField}__{$viewMode}");
    array_splice($suggestions, 2, 0, "field__teaserable__{$teaserField}");
  }
}

function frontend_preprocess_menu(array &$variables): void {
  if (in_array($variables['menu_name'], ['admin', 'administration', 'editor', 'toolbar'])) {
    return;
  }
  $variables['attributes'] = \Drupal::service('designsystem.helper')->toAttributeObject($variables['attributes']);
  $variables['attributes']->setAttribute('data-menu-name', $variables['menu_name']);
  $region = NULL;
  if (!empty($variables['attributes']['data-drupal-region'])) {
    $region = (string) $variables['attributes']['data-drupal-region'];
    $variables['attributes']->setAttribute('data-menu-region', $region);
  }
  if (!empty($variables['items'])) {
    _frontend_preprocess_menu_items($variables['items'], $variables['menu_name'], 0, $region);
  }
}

function _frontend_preprocess_menu_items(array &$items, string $name, int $level, string $region=NULL): void {
  foreach($items as $idx => $item) {
    $items[$idx]['attributes'] = \Drupal::service('designsystem.helper')->toAttributeObject($items[$idx]['attributes']);
    $linkAttributes = \Drupal::service('designsystem.helper')->toAttributeObject($items[$idx]['url']->getOption('attributes'));
    $items[$idx]['attributes']->setAttribute('data-menu-name', $name);
    $items[$idx]['attributes']->setAttribute('data-menu-level', $level);
    $linkAttributes->setAttribute('data-menu-name', $name);
    $linkAttributes->setAttribute('data-menu-level', $level);
    if ($region) {
      $items[$idx]['attributes']->setAttribute('data-menu-region', $region);
      $linkAttributes->setAttribute('data-menu-region', $region);
    }
    $items[$idx]['url']->setOption('attributes', $linkAttributes->toArray());
    if (!empty($item['below'])) {
      _frontend_preprocess_menu_items($items[$idx]['below'], $name, $level+1, $region);
    }
  }
}
