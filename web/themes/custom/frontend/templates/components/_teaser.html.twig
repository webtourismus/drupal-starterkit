{##
 #
 # Shared teaserable base template for teaserable entities like icon or
 # linkblock paragraphs and any node type in a teaser-like display mode.
 #
 # Available functions:
 # ====================
 # - entity.getTeaserTitleField(): ?FieldItemList
 # - entity.getTeaserSubtitleField(): ?FieldItemList
 # - entity.getTeaserImagesField(): ?FieldItemList
 # - entity.getTeaserTextField(): ?FieldItemList
 # - entity.getTeaserUrl(): ?Url
 #
 # Available only in referencing teaser entities:
 # ==============================================
 # - entity.getReferencedEntity(): ?ContentEntity
 # - entity.getReferencingField(): ?FieldItemList
 #
 # Available render arrays:
 # ========================
 # - entity.getRenderedTeaserTitle() or content[entity.getRenderedTeaserTitle.getName]
 # - entity.getRenderedTeaserSubtitle() or content[entity.getRenderedTeaserSubtitle.getName]
 # - entity.getRenderedTeaserImages() or content[entity.getRenderedTeaserImages.getName]
 # - entity.getRenderedTeaserText() or content[entity.getRenderedTeaserText.getName]
 #
 # Note that the keys in the "content" render array are the names of the referenced field
 # storages and might be different than the semantic field name. (E.g. a paragraph might have
 # a "content.field_text" which falls back to a referenced node's "content.body").
 #
 # All render arrays provide these helper variables:
 # =================================================
 # - content.FIELD['#teaser_fieldname'] ... the semantic field name
 #
 # This semantic field name is normalized, no matter if the field is from a
 # referenced entity, or from its own entity.
 #
 #
 #
 # @see \Drupal\landle\Entity\TeaserableInterface for more information.
 #
 ##}

{% block teaserable %}
<div {{ attributes }}>
  {% block image_container %}
  {% set bundle = entity.getReferencedEntity.bundle ?? entity.bundle() %}
  {% set multiple_images = (entity.getTeaserImagesField.getValue|length >= 2) %}
  {% set splidejs_config = {
      'arrows': (true and multiple_images),
      'pagination': (false and multiple_images),
      'drag': (true and multiple_images),
  } %}

  <div class="teaserable-image-container splide" data-splide="{{ splidejs_config|json_encode(constant('JSON_UNESCAPED_SLASHES')) }}">
    {{ {'#theme': 'splidejs_arrows'}|add_suggestion(bundle) }}

    <div class="splide__track">
      <div class="splide__list">
        {{ content[entity.getTeaserImagesField.getName]|add_suggestion('teaserable-images-slider') }}
      </div>
    </div>
  </div>
  {% endblock %}

  {% block text_container %}
  <div class="teaserable-text-container">
    {{ content|without(entity.getTeaserImagesField.getName, 'field_link')|without(entity.getActionFieldnames) }}
  </div>
  {% endblock %}

  {% block link_container %}
  <div class="teaserable-link-container">
    {{ content.field_link }}
    {% for action_id, action_fieldname in entity.getActionFieldnames %}
      {{ entity.getRenderedAction(action_id, view_mode) }}
    {% endfor %}
  </div>
  {% endblock %}
</div>
{% endblock %}
