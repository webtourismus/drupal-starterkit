{##
 ######################################################################
 # TEASER
 ######################################################################
 #
 # Shared teaserable base template for teaserable entities like icon or
 # linkblock paragraphs and any node type in a teaser-like display mode.
 #
 # @see \Drupal\ebr_teaser\Entity\TeaserableInterface for more information.
 #
 # Always available functions:
 # ===========================
 # - entity.getTeaserTitleField(): ?FieldItemList
 # - entity.getTeaserSubtitleField(): ?FieldItemList
 # - entity.getTeaserImagesField(): ?FieldItemList
 # - entity.getTeaserTextField(): ?FieldItemList
 # - entity.getTeaserUrl(): ?Url
 #
 # Available only in referencing teaser entities:
 # ==============================================
 # - entity.getReferencedEntity(): ?ContentEntity
 # - entity.getReferencingField(): ?FieldItemList
 #
 # Available render arrays:
 # ========================
 # - entity.getRenderedTeaserTitle() or content[entity.getRenderedTeaserTitle.getName]
 # - entity.getRenderedTeaserSubtitle() or content[entity.getRenderedTeaserSubtitle.getName]
 # - entity.getRenderedTeaserImages() or content[entity.getRenderedTeaserImages.getName]
 # - entity.getRenderedTeaserText() or content[entity.getRenderedTeaserText.getName]
 #
 # Note that the keys in the "content" render array are the names of the referenced field
 # storages and might be different than the semantic field name. (E.g. a paragraph might have
 # a "content.field_text" which falls back to a referenced node's "content.body").
 #
 # All render arrays provide these helper variables:
 # =================================================
 # - content.FIELD['#teaser_fieldname'] ... the semantic field name
 #
 # This semantic field name is normalized, no matter if the field is from a
 # referenced entity, or from its own entity.
 #
 ######################################################################
 # ACTIONS
 ######################################################################
 #
 # Entites can implement the Actionable Interface to provide Call-to-Action links.
 #
 # @see \Drupal\ebr\Entity\ActionableInterface for more information.
 #
 # (Referenced) Bundle specific "actions":
 # =======================================
 # - entity.getActionFieldNames(): Array<string>
 # - entity.getActionLabel($actionId): TranslatableMarkup|string|NULL
 # - entity.getActionFieldUrl($actionId): ?Url
 # - entity.getRenderedAction($actionId, $viewMode): ?Array
 #
 # Default in node.page: readmore
 # Default in node.room: readmore, booking, enquiry
 # Default in node.package: readmore, booking, enquiry
 # Default in paragraph: readmore + potentionally more actions from referenced entity
 #
 ######################################################################
 # PRODUCT FIELDS
 ######################################################################
 #
 # Entites can implement the Productable Interface to nominate fields
 # for use in teaserable templates.
 #
 # @see \Drupal\ebr\Entity\ProductableInterface for more information.
 #
 # (Referenced) Bundle specific "product fields":
 # ==============================================
 # - entity.getProductFieldNames(): Array<string>
 # - entity.getProdcutFieldLabel($fieldName): TranslatableMarkup|string|NULL
 # - entity.getProductField($fieldName): ?FieldItemList
 # - entity.getRenderedProductField($fieldName, $viewMode): ?Array
 #
 # Default in node.room: field_price, field_occupancy_std, field_occupancy_std, field_occupancy_max
 # Default in node.package: field_price, field_minlos, field_mealplan
 # Default in paragraph: none, but potentionally product fields from referenced entity
 #
 ##}

{% set entity = paragraph ?? node %}
{% set reference = entity.getReferencedEntity ?? entity %}
{% set bundle = entity.bundle() %}

{% set images_attributes = create_attribute({'class': ['teaserable-images']}) %}
{% set texts_attributes = create_attribute({'class': ['teaserable-texts']}) %}
{% set title_attributes = create_attribute({'class': ['teaserable-title']}) %}
{% set product_attributes = create_attribute({'class': ['teaserable-product']}) %}

{% set text_wrapper_attributes = create_attribute({'class': ['teaserable-text-wrapper']}) %}
{% set link_wrapper_attributes = create_attribute({'class': ['teaserable-link-wrapper']}) %}

{% if entity.getActionUrl('readmore') %}
  {% set attributes = attributes.addClass(['teaserable-is-linked']) %}
  {% set images_attributes = images_attributes.addClass('cursor-pointer').setAttribute('data-js-behavior-linkify', 'readmore') %}
  {% set title_link_attributes = create_attribute({
    'href': entity.getActionUrl('readmore').toString,
    'target': entity.getReferencingField.0.options.attributes.target,
    'data-action-link-type': 'readmore',
  }) %}
{% else %}
  {% set attributes = attributes.addClass('teaserable-no-link') %}
{% endif %}



{% block teaserable %}
<div {{ attributes }}>
  {% block images %}
  <div {{ images_attributes }}>
    {{ content[entity.getTeaserImagesField.getName] }}
  </div>
  {% endblock %}

  {% block texts %}
    <div {{ texts_attributes }}>
      {% block text_wrapper %}
      <div {{ text_wrapper_attributes }}>
        {% block text_title %}
          {% if entity.getTeaserTitleField.0.value and not(paragraph.isFieldSuppressed('field_title') ?? false) %}
            <h3 {{ title_attributes }}>
              {% if entity.getActionUrl('readmore') %}
                <a {{ title_link_attributes }}>
              {% endif %}
              {{ entity.getTeaserTitleField.0.value }}
              {% if entity.getActionUrl('readmore') %}
                </a>
              {% endif %}
            </h3>
          {% endif %}
        {% endblock %}
        {% block text_product %}
          {% if entity.getProductFieldNames %}
            <div {{ product_attributes }}>
              {% for product_field in entity.getProductFieldNames %}
                {{ content[product_field] }}
              {% endfor %}
            </div>
          {% endif %}
        {% endblock %}
        {% block text_running %}
          {{ content|without(entity.getTeaserImagesField.getName, entity.getTeaserTitleField.getName)|without(entity.getActionFieldnames)|without(entity.getProductFieldNames) }}
        {% endblock %}
      </div>
      {% endblock %}

      {% block link_wrapper %}
      <div {{ link_wrapper_attributes }}>
        {% for action_id, action_fieldname in entity.getActionFieldnames %}
          {{ entity.getRenderedAction(action_id, view_mode) }}
        {% endfor %}
      </div>
      {% endblock %}
    </div>
  {% endblock %}
</div>
{% endblock %}
