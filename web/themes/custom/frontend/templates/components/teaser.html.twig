{##
 ######################################################################
 # TEASER
 ######################################################################
 #
 # Shared teaserable base template for teaserable entities like icon or
 # linkblock paragraphs and any node type in a teaser-like display mode.
 #
 # @see \Drupal\ebr_teaser\Entity\TeaserableInterface for more information.
 #
 # Always available functions:
 # ===========================
 # - entity.getTeaserTitleField(): ?FieldItemList
 # - entity.getTeaserSubtitleField(): ?FieldItemList
 # - entity.getTeaserImagesField(): ?FieldItemList
 # - entity.getTeaserTextField(): ?FieldItemList
 # - entity.getTeaserUrl(): ?Url
 #
 # Available only in referencing teaser entities:
 # ==============================================
 # - entity.getReferencedEntity(): ?ContentEntity
 # - entity.getReferencingField(): ?FieldItemList
 #
 # Available render arrays:
 # ========================
 # - entity.getRenderedTeaserTitle() or content[entity.getRenderedTeaserTitle.getName]
 # - entity.getRenderedTeaserSubtitle() or content[entity.getRenderedTeaserSubtitle.getName]
 # - entity.getRenderedTeaserImages() or content[entity.getRenderedTeaserImages.getName]
 # - entity.getRenderedTeaserText() or content[entity.getRenderedTeaserText.getName]
 #
 # Note that the keys in the "content" render array are the names of the referenced field
 # storages and might be different than the semantic field name. (E.g. a paragraph might have
 # a "content.field_text" which falls back to a referenced node's "content.body").
 #
 # All render arrays provide these helper variables:
 # =================================================
 # - content.FIELD['#teaser_fieldname'] ... the semantic field name
 #
 # This semantic field name is normalized, no matter if the field is from a
 # referenced entity, or from its own entity.
 #
 ######################################################################
 # ACTIONS
 ######################################################################
 #
 # Entites can implement the Actionable Interface to provide Call-to-Action links.
 #
 # @see \Drupal\ebr\Entity\ActionableInterface for more information.
 #
 # (Referenced) Bundle specific "actions":
 # =======================================
 # - entity.getActionFieldnames(): Array<string>
 # - entity.getActionLabel($actionId): TranslatableMarkup|string|NULL
 # - entity.getActionFieldUrl($actionId): ?Url
 # - entity.getRenderedAction($actionId, $viewMode): ?Array
 #
 # Default in node.page: readmore
 # Default in node.room: readmore, booking, enquiry
 # Default in node.package: readmore, booking, enquiry
 # Default in paragraph: readmore + potentionally more actions from referenced entity
 #
 ######################################################################
 # PRODUCT FIELDS
 ######################################################################
 #
 # Entites can implement the Productable Interface to nominate fields
 # for use in teaserable templates.
 #
 # @see \Drupal\ebr\Entity\ProductableInterface for more information.
 #
 # (Referenced) Bundle specific "product fields":
 # ==============================================
 # - entity.getProductFieldnames(): Array<string>
 # - entity.getProdcutFieldLabel($fieldName): TranslatableMarkup|string|NULL
 # - entity.getProductField($fieldName): ?FieldItemList
 # - entity.getRenderedProductField($fieldName, $viewMode): ?Array
 #
 # Default in node.room: field_price, field_occupancy_std, field_occupancy_std, field_occupancy_max
 # Default in node.package: field_price, field_minlos, field_mealplan
 # Default in paragraph: none, but potentionally product fields from referenced entity
 #
 ##}

{% set entity = paragraph ?? node %}
{% if paragraph %}
  {% set layout = _context['#layout_paragraphs'] %}
  {# Style options from paragraph behaviors. These need post-processing in view mode child templates. #}
  {% set paragraph_colorschema = paragraph.getBehaviorSetting('inline_style_options', 'colorschema_paragraph').html_attribute %}
  {% set paragraph_columns = paragraph.getBehaviorSetting('inline_style_options', 'column_width_paragraph').responsive_class %}
  {% set paragraph_gap = paragraph.getBehaviorSetting('inline_style_options', 'layout_gap_horizontal').html_attribute %}
{% endif %}
{% set reference = entity.getReferencedEntity() ?? entity %}
{% set bundle = entity.bundle() %}

{% set attributes = attributes.addClass(['grid']) %}
{% if paragraph_colorschema is empty %}
  {% set attributes = attributes.addClass(['gap-y-6']) %}
{% endif %}

{% set images_attributes = create_attribute({'class': ['teaserable-images', 'self-center']}) %}
{% if entity.bundle() != 'icon' %}
  {# by default use white foreground (text and arrows) above images #}
  {% set images_attributes = images_attributes.addClass('cs-darkimg') %}
{% endif %}

{% set texts_attributes = create_attribute({
  'class': ['teaserable-texts', 'flex', 'flex-row', 'items-stretch'],
}) %}
{% set text_background_attributes = create_attribute({
  'class': ['teaserable-text-background', 'w-full', 'flex', 'flex-col', 'items-stretch', 'gap-4']
}) %}
{% if paragraph_colorschema %}
  {# linkblocks might have a background color, but only for the text area, the cs-class must be moved downwards #}
  {% set attributes = attributes.removeClass(paragraph_colorschema) %}
  {% set attributes = attributes.removeClass(paragraph_colorschema) %}
  {% if view_mode in ['teaser', 'teaser_imgtop', 'teaser_imgleft', 'teaser_imgright'] %}
    {% set text_background_attributes = text_background_attributes.addClass([paragraph_colorschema, 'p-4']) %}
  {% endif %}
{% endif %}
{% set text_wrapper_attributes = create_attribute({
  'class': ['teaserable-text-wrapper', 'flex', 'flex-col', 'items-stretch', 'gap-4'],
}) %}

{% set title_attributes = create_attribute({'class': ['teaserable-title', 'h4']}) %}

{% set product_attributes = create_attribute({
  'class': ['teaserable-product', 'w-full', 'flex', 'flex-wrap', 'gap-4', 'children:w-auto', 'children:nowrap'],
}) %}

{% set link_wrapper_attributes = create_attribute({'class': ['teaserable-link-wrapper', 'flex', 'items-center', 'gap-2']}) %}

{% if entity.getActionUrl('readmore') %}
  {% set attributes = attributes.addClass(['teaserable-is-linked']) %}
  {% set images_attributes = images_attributes.addClass('cursor-pointer').setAttribute('data-js-behavior-linkify', 'readmore') %}
  {% set title_link_attributes = create_attribute({
    'href': entity.getActionUrl('readmore').toString,
    'target': entity.getReferencingField.0.options.attributes.target,
    'data-action-link-type': 'readmore',
  }) %}
{% else %}
  {% set attributes = attributes.addClass('teaserable-no-link') %}
{% endif %}



{% block teaserable %}
  {# Hack to render "&" and ">" from Tailwind class names like "[&>.child]:text-center". #}
  <div class="{{ attributes.class|replace({'&amp;': '&', '&gt;': '>'})|raw }}" {{attributes|without('class')}}>
    {% block images %}
      <div {{ images_attributes }}>
        {{ content[entity.getTeaserImagesField.getName] }}
      </div>
    {% endblock images %}

    {% block texts %}
      <div {{ texts_attributes }}>
        {% block text_background %}
          <div {{ text_background_attributes }}>

            {% block text_wrapper %}
              <div {{ text_wrapper_attributes }}>

                {% block text_title %}
                  {% if entity.getTeaserTitleField.0.value and not(paragraph.isFieldSuppressed('field_title') ?? false) %}
                    <h3 {{ title_attributes }}>
                      {% if entity.getActionUrl('readmore') %}
                        <a {{ title_link_attributes }}>
                      {% endif %}
                      {{ entity.getTeaserTitleField.0.value }}
                      {% if entity.getActionUrl('readmore') %}
                        </a>
                      {% endif %}
                    </h3>
                  {% endif %}
                {% endblock text_title %}

                {% block text_product %}
                  {% if entity.getProductFieldnames(view_mode) %}
                    <div {{ product_attributes }}>
                      {% for product_field in entity.getProductFieldnames(view_mode) %}
                        {{ content[product_field] }}
                      {% endfor %}
                    </div>
                  {% endif %}
                {% endblock text_product %}

                {% block text_subtitle %}
                  {{ content[entity.getTeaserSubtitleField.getName] }}
                {% endblock text_subtitle %}

                {% block text_running %}
                  {{ content[entity.getTeaserTextField.getName] }}
                {% endblock text_running %}
              </div>
            {% endblock text_wrapper %}

            {% block link_wrapper %}
              {% if entity.getActionFieldnames(view_mode) %}
                <div {{ link_wrapper_attributes }}>
                  {% for action_link in entity.getActionFieldnames(view_mode) %}
                    {{ content[action_link] }}
                  {% endfor %}
                </div>
              {% endif %}
            {% endblock link_wrapper %}

          </div>
        {% endblock text_background %}
      </div>
    {% endblock texts %}
  </div>
{% endblock teaserable %}
